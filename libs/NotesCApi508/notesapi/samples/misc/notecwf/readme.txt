(c) 1996-2001 Lotus Development Corporation.  All rights reserved.
This software is subject to the Lotus C API for Domino and Notes Software 
Development Kit Agreement (in the apilicns.txt file in the notesapi directory 
of this toolkit), Restricted Rights for U.S. government users, and applicable
export regulations.


PROGRAM
-------
notecwf - Sample Lotus C API for Domino and Notes Program for 
	  NSFNoteComputeWithForm


PURPOSE
-------
This program uses a specified form note, prompts the user to enter input field
values, calls NSFNoteComputeWithForm to validate input and compute output 
values, and displays the input and output fields and values of the form.

This sample program shows that the NSFNoteComputeWithForm API function
    1) will compute form field values, which then can be retrieved for use
    2) will run the designed input validation and computed field value 
       formulas; if a failure condition is present, the supplied callback 
       function is called for tracing the error. 



ENVIRONMENTS
------------
Windows NT (32-bit) (including DEC Alpha)
Windows 95/98 (32-bit)


FILES
-----
readme.txt  - This file. Specifies what is needed to use this example.

notecwf.c   - Main program.

mswin32.mak - Make file for Windows 32-bit.


RUNNING notecwf
---------------
This sample program will run against the Domino database notecwf.nsf, provided
with the Lotus C API for Domino and Notes toolkit in the notedata directory.  
You should copy this file to the Domino or Notes data directory before running
this program.   

This database provides a form to enter measurement input data for the length 
and width of a rectangle, and computes the output data for the corresponding 
perimeter and area values.  The input field values are editable and are 
designed with input validation formulas that generate a failure if the 
entered value is not numeric, negative, or smaller than 0.01.  The output 
field values are the computed perimeter and area of the rectangle, where 
	perimeter = 2*length + 2*width
	area = length*width.

For invalid numeric input field values, the computed fields will generate 
failure text.

Sample notecwf can be run by using the following command:

    notecwf
	
The sample will prompt you for the database filename, the length and the 
width.


Verifying NSFNoteComputeWithForm Computed Field support
------------------------------------------------------- 
After invoking the sample, you are prompted to enter measurement values for the 
length and width of a rectangle.  If you enter positive numeric values that are 
greater than 0.01 (for precision limitations) for both measurements, the sample 
will display the computed perimeter and area values as generated by the 
NSFNoteComputeWithForm API function.  The note is then added to the database. 
You can validate the displayed values by opening notecwf.nsf and viewing the 
note from the Main View.


Verifying NSFNoteComputeWithForm Input Validation support
--------------------------------------------------------- 
If you enter a non-numeric value, a negative numeric value, or a numeric 
value that is less than 0.01, for either the lenght or width, both the 
input validation and computed field value formulas will flag errors.  As a 
result, the error callback function (called by NSFNoteComputeWithForm) will 
print out the field name and validation phase for each failure.  The note 
is not added to the sample database.  You can double check the validation 
error by opening notecwf.nsf, creating a new "Measurement" form, and 
specifying the same values for the length and width that you entered for the 
sample.  When you hit <F9> an input validation error message box will appear 
for the first invalid input and error message strings will be generated for 
the computed fields.

Note:
The NSFNoteComputeWithForm API function has a two pass validation process:
The "load" pass runs the default field value and related computed field value
formulas. The "save" pass runs the translation, validation, and datatype input
field formulas, along with the related computed field value formulas.  Since
computed field values are validated for both passes, you will notice that these
fields will be traced twice by the error callback function when running this 
sample with invalid input field values.


Limitations
-----------
1) This sample is designed to process all fields, even when a validation error
occurs, by returning the CWF_NEXT_FIELD return code from the callback function. 
The NSFNoteComputeWithForm API and callback functions can also be 
configured to
    -  abort when the first validation error is encountered (CWF_ABORT)
    -  begin the field validation process over again (CWF_RECHECK_FIELD)
    -  convert incorrect data types to the correct data types (CWF_CONVERT)
These configurations are not illustrated by the notecwf sample.   

3) The sample database and program do not support validation formulas for 
Default values, Value Translation, and Datatype Conversion, which can also be
processed by NSFNoteComputeWithForm.

